void display(GLFWwindow* window, GLuint shader_program, GLuint m_location, GLuint mvp_location, GLuint norm_mat_location, GLuint light_location, GLuint light_color_1_location, GLuint light_color_2_location, GLuint world_origin_location, GLuint texture_location, unsigned int tex1_width, unsigned int tex1_height, unsigned char *imagedata1, unsigned int tex2_width, unsigned int tex2_height, unsigned char *imagedata2, unsigned int tex3_width, unsigned int tex3_height, unsigned char *imagedata3, GLuint *VAO, GLuint bird_VAO[][3], GLuint *obst_VAO, GLuint sky_VAO, gmtl::Matrix44f mat[][3])
{
	gmtl::Matrix33f normMat[num_birds + 1][3];
	if (cam_1_active == true)
		V_current = V_cam_1;
	else
		V_current = V_cam_2;
	for (int i = 0; i < num_birds + 1; i++) {
		for (int j = 0; j < 3; j++) {
			mat[i][j] = V_current * mat[i][j];
			normMat[i][j][0][0] = mat[i][j][0][0];
			normMat[i][j][0][1] = mat[i][j][0][1];
			normMat[i][j][0][2] = mat[i][j][0][2];
			normMat[i][j][1][0] = mat[i][j][1][0];
			normMat[i][j][1][1] = mat[i][j][1][1];
			normMat[i][j][1][2] = mat[i][j][1][2];
			normMat[i][j][2][0] = mat[i][j][2][0];
			normMat[i][j][2][1] = mat[i][j][2][1];
			normMat[i][j][2][2] = mat[i][j][2][2];
			normMat[i][j] = gmtl::invert(normMat[i][j]);
		}
	}

	/*if (cam_1_active) {
		for (int i = 0; i < 3; i++) {
			M_sky[i][3] = cam_1_wrt_W[i][3];
		}
	}
	else {
		for (int i = 0; i < 3; i++) {
			M_sky[i][3] = Cam_2_wrt_W[i][3];
		}
	}*/

	light_position.set(0.0, 0.75, 1.0, 1.0);
	light_position = V_current * light_position;
	world_origin.set(V_current[0][3], V_current[1][3], V_current[2][3], V_current[3][3]);
	light_color_1.set(0.0, 0.0, 0.0);
	light_color_2.set(0.0, 0.0, 0.0);
	if (light1 == true)
		light_color_1.set(1.0, 1.0, 1.0);
	if (light2 == true)
		light_color_2.set(1.0, 1.0, 0.0);

	glClearColor(0.0, 0.0, 0.0, 1.0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glUseProgram(shader_program);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_PRIMITIVE_RESTART);
	glPrimitiveRestartIndex(0xFFFF);

	glUniform4f(light_location, light_position[0], light_position[1], light_position[2], light_position[3]);
	glUniform4f(world_origin_location, world_origin[0], world_origin[1], world_origin[2], world_origin[3]);
	glUniform3f(light_color_1_location, light_color_1[0], light_color_1[1], light_color_1[2]);
	glUniform3f(light_color_2_location, light_color_2[0], light_color_2[1], light_color_2[2]);

	glUniform1i(texture_location, 0);
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, texture_location);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, tex1_height, tex1_width, 0, GL_RGB, GL_UNSIGNED_BYTE, imagedata1);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

	for (int i = 0; i < num_obs; i++) {
		glBindVertexArray(obst_VAO[i]);
		glUniformMatrix4fv(m_location, 1, GL_FALSE, (V_current * M_obstacle[i]).mData);
		glUniformMatrix4fv(mvp_location, 1, GL_FALSE, (P * V_current * M_obstacle[i]).mData);
		glUniformMatrix3fv(norm_mat_location, 1, GL_FALSE, (V_current * M_obstacle[i]).mData);
		glDrawElements(GL_TRIANGLE_STRIP, sphere_size, GL_UNSIGNED_INT, (void*)0);
	}

	/* --------------------Draw the cylinders-------------------------------- */
	if (draw_axes == true) {
		glBindVertexArray(VAO[1]);

		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < 3; j++) {
				set_T_cyl(i, j);
				glUniformMatrix4fv(m_location, 1, GL_FALSE, (V_current * M_cyl_to_world).mData);
				glUniformMatrix4fv(mvp_location, 1, GL_FALSE, (P*V_current * M_cyl_to_world).mData);
				glUniformMatrix3fv(norm_mat_location, 1, GL_FALSE, (V_current * M_cyl_to_world).mData);
				glDrawElements(GL_TRIANGLE_STRIP, cyl_size, GL_UNSIGNED_INT, (void*)0);
			}
		}

		glBindVertexArray(VAO[2]);
		for (int i = 0; i < 3; i++) {
			set_T_cyl(2, i);
			glUniformMatrix4fv(m_location, 1, GL_FALSE, (V_current * M_cyl_to_world).mData);
			glUniformMatrix4fv(mvp_location, 1, GL_FALSE, (P*V_current * M_cyl_to_world).mData);
			glUniformMatrix3fv(norm_mat_location, 1, GL_FALSE, (V_current * M_cyl_to_world).mData);
			glDrawElements(GL_TRIANGLE_STRIP, cyl_size, GL_UNSIGNED_INT, (void*)0);
		}
	}

	bool bird_text = false; // change to false to render without texture
	if (bird_text == true) {
		glUniform1i(texture_location, 0);
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture_location);
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, tex2_height, tex2_width, 0, GL_RGB, GL_UNSIGNED_BYTE, imagedata2);

		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	}

	for (int i = 0; i < num_birds; i++) {
		/* -------------------------Draw the bird----------------------------- */
		glBindVertexArray(bird_VAO[i][0]);
		glUniformMatrix4fv(m_location, 1, GL_FALSE, (mat[i][0]).mData);
		glUniformMatrix4fv(mvp_location, 1, GL_FALSE, (P*mat[i][0]).mData);
		glUniformMatrix3fv(norm_mat_location, 1, GL_FALSE, normMat[i][0].mData);
		glDrawElements(GL_TRIANGLE_STRIP, 13, GL_UNSIGNED_INT, (void*)0);

		/* --------------------------Draw wing 1------------------------------ */
		glBindVertexArray(bird_VAO[i][1]);
		glUniformMatrix4fv(m_location, 1, GL_FALSE, (mat[i][1]).mData);
		glUniformMatrix4fv(mvp_location, 1, GL_FALSE, (P*mat[i][1]).mData);
		glUniformMatrix3fv(norm_mat_location, 1, GL_FALSE, normMat[i][1].mData);
		glDrawElements(GL_TRIANGLE_STRIP, 3, GL_UNSIGNED_INT, (void*)0);

		/* ---------------------------Draw wing 2---------------------------- */
		glBindVertexArray(bird_VAO[i][2]);
		glUniformMatrix4fv(m_location, 1, GL_FALSE, (mat[i][2]).mData);
		glUniformMatrix4fv(mvp_location, 1, GL_FALSE, (P*mat[i][2]).mData);
		glUniformMatrix3fv(norm_mat_location, 1, GL_FALSE, normMat[i][2].mData);
		glDrawElements(GL_TRIANGLE_STRIP, 3, GL_UNSIGNED_INT, (void*)0);
	}

	/* -------------------------Draw the sphere--------------------------- */
	bool sphere_text = false;  // change to false to render without texture
	if (sphere_text == true) {
		glUniform1i(texture_location, 0);

		glActiveTexture(GL_TEXTURE0);

		glBindTexture(GL_TEXTURE_2D, texture_location);

		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, tex3_height, tex3_width, 0, GL_RGB, GL_UNSIGNED_BYTE, imagedata3);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	}

	glBindVertexArray(VAO[0]);
	glUniformMatrix4fv(m_location, 1, GL_FALSE, mat[num_birds][0].mData);
	glUniformMatrix4fv(mvp_location, 1, GL_FALSE, (P*mat[num_birds][0]).mData);
	glUniformMatrix3fv(norm_mat_location, 1, GL_FALSE, normMat[num_birds][0].mData);
	glDrawElements(GL_TRIANGLE_STRIP, sphere_size, GL_UNSIGNED_INT, (void*)0);

	glUniform1i(texture_location, 0);
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, texture_location);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, tex2_height, tex2_width, 0, GL_RGB, GL_UNSIGNED_BYTE, imagedata2);

	glBindVertexArray(sky_VAO);
	glUniformMatrix4fv(m_location, 1, GL_FALSE, (V_current * M_sky).mData);
	glUniformMatrix4fv(mvp_location, 1, GL_FALSE, (P*V_current * M_sky).mData);
	glUniformMatrix3fv(norm_mat_location, 1, GL_FALSE, (V_current * M_sky).mData);
	glDrawElements(GL_TRIANGLE_STRIP, sphere_size, GL_UNSIGNED_INT, (void*)0);

	//glBindVertexArray(VAO[3]);
	//glDrawElements(GL_LINES, 6 * num_birds, GL_UNSIGNED_INT, (void*)0);
	//glDrawArrays(GL_LINES, 0, 6 * num_birds);

	glBindVertexArray(0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
}